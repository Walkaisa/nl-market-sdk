import { readFileSync } from "node:fs";
import { join } from "node:path";
import { defineConfig } from "tsup";

const pkg = JSON.parse(readFileSync(join(process.cwd(), "package.json"), "utf-8")) as {
	dependencies?: Record<string, string>;
	peerDependencies?: Record<string, string>;
};

export default defineConfig(({ watch }) => ({
	entry: ["src/index.ts"],
	format: ["esm", "cjs"],
	dts: {
		entry: "src/index.ts",
		respectExternal: true,
		compilerOptions: {
			paths: {
				"@/*": ["./src/*"]
			}
		}
	},
	clean: true,
	outDir: "dist",
	target: "node20",
	platform: "node",
	treeshake: true,
	splitting: false,
	sourcemap: true,
	minify: !watch,
	skipNodeModulesBundle: true,
	tsconfig: "tsconfig.json",
	external: [...Object.keys(pkg.dependencies ?? {}), ...Object.keys(pkg.peerDependencies ?? {}), "node:crypto", "node:fs", "node:path"],
	define: {
		__DEV__: JSON.stringify(Boolean(watch)),
		"process.env.NODE_ENV": JSON.stringify(watch ? "development" : "production")
	},
	esbuildOptions(options) {
		options.banner ||= {};
		if (options.format === "cjs") {
			options.banner.js = "// Generated by tsup â€“ CommonJS bundle";
		}
	},
	env: {
		TSUP_BUILD_DATE: new Date().toISOString()
	}
}));
